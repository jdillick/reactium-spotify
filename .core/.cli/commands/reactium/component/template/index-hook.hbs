import _ from 'underscore';
import cn from 'classnames';
import op from 'object-path';
import PropTypes from 'prop-types';

import Reactium, {
    ComponentEvent,
    useDerivedState,
    useEventHandle,
    useRefs,
    useStatus,
} from 'reactium-core/sdk';

import React, { forwardRef, useImperativeHandle, useEffect } from 'react';

const ENUMS = {
    STATUS: {
        PENDING: 'PENDING',
        INITIALIZING: 'INITIALIZING',
        INITIALIZED: 'INITIALIZED',
        READY: 'READY',
    },
};

const noop = () => {};

/**
 * -----------------------------------------------------------------------------
 * Hook Component: {{name}}
 * -----------------------------------------------------------------------------
 */
let {{name}} = (initialProps, ref) => {
    let {
        children,
        className,
        namespace,
        onStatus,
        state:initialState,
        ...props
    } = initialProps;

    // -------------------------------------------------------------------------
    // Refs
    // -------------------------------------------------------------------------
    const refs = useRefs();

    // -------------------------------------------------------------------------
    // State
    // -------------------------------------------------------------------------
    const [state, update] = useDerivedState(initialState);
    const setState = newState => {
        if (unMounted()) return;
        update(newState);
    };

    // -------------------------------------------------------------------------
    // Status
    // -------------------------------------------------------------------------
    const [status, setStatus, isStatus] = useStatus(ENUMS.STATUS.PENDING);

    // -------------------------------------------------------------------------
    // Internal Interface
    // -------------------------------------------------------------------------

    // cx(suffix:String);
    // className extension
    const cx = Reactium.Utils.cxFactory(className || namespace);

    // dispatch(eventType:String, event:Object, callback:Function);
    // dispatch events, run a hook, execute a callack
    const dispatch = async (eventType, event = {}, callback) => {
        eventType = String(eventType).toLowerCase();

        const evt = new ComponentEvent(eventType, event);

        handle.dispatchEvent(evt);

        if (unMounted()) return;
        await Reactium.Hook.run(eventType, evt, handle);

        if (unMounted()) return;
        if (typeof callback === 'function') await callback(evt);
    };

    // initialize();
    // run initialization process
    const initialize = async () => {
        // SET STATUS TO INITIALIZING
        setStatus(ENUMS.STATUS.INITIALIZING);

        // DO YOUR INITIALIZATION HERE

        // SET STATUS TO INITIALIZED WHEN COMPLETE
        setStatus(ENUMS.STATUS.INITIALIZED);
    };

    // unmount();
    // check if the component has been unmounted
    const unMounted = () => !refs.get('container');

    // -------------------------------------------------------------------------
    // Handle
    // -------------------------------------------------------------------------
    const _handle = () => ({
        children,
        className,
        cx,
        dispatch,
        initialize,
        namespace,
        onStatus,
        props,
        setState,
        state,
        unMounted,
    });
    const [handle, setNewHandle] = useEventHandle(_handle());

    useImperativeHandle(ref, () => handle, [handle]);

    // -------------------------------------------------------------------------
    // Side effects
    // -------------------------------------------------------------------------
    // Status change
    useEffect(() => {
        dispatch('status', { status }, onStatus);

        switch (status) {
            case ENUMS.STATUS.PENDING:
                initialize();
                break;
        }
    }, [status]);

    // -------------------------------------------------------------------------
    // Render
    // -------------------------------------------------------------------------
    //   The unMounted() function relies on refs.get('container').
    //   If it is not present, setState() will not execute.
    //   This could lead to your component rendering empty if you have a
    //   condition that checks state and renders null if certain conditions
    //   are not met.
    // -------------------------------------------------------------------------
    return (
        <div ref={elm => refs.set('container', elm)} className={cx()}>
            {children}
        </div>
    );
};

{{name}} = forwardRef({{name}});

{{name}}.ENUMS = ENUMS;

{{name}}.propTypes = {
    className: PropTypes.string,
    namespace: PropTypes.string,
    onStatus: PropTypes.func,
    state: PropTypes.object,
};

{{name}}.defaultProps = {
    namespace: 'NAMESPACE',
    onStatus: noop,
    state: {},
};

export { {{name}}, {{name}} as default };
